- overall goal -
take a set of commands a human can read/edit (i.e. the timeframe) and turn it into a set of commands the different bits of hardware needed to control the experiment can understand.

- Brief HW overview -
- two types of cards: viewpoint DIO64 digital I/O (64 channels), and NI 6713 (?) analog outputs (two cards, 8 channels each).
- additionally we have the DDS, which is programmed directly by the viewpoint card. 
- the camera is programmed at the start of the timeframe, and triggered by the viewpoint card
- furthermore, support for a tectronix scope, but this is a bit ad-hoc, and not used much
- AFAIK julian recently added support for the agilent waveform generator
- everything is controlled by the viewpoint card. this is the only time reference. the analog card just have a list of commands, and simply update to the next command in their list upon receiving a trigger from the viewpoint card. the scope and wf generator are not really timed (based on camera and simply programmed at start of timeframe respectively)
- I'll concentrate only on the digital and analog output cards from now on, once you understand those everything else should pretty much fall into place.
- since each update of the analog cards is triggered by the viewpoint card there will always be at least as many digital updates as analog updates. (possibly more, if at any given time the digital box updates but the analog outputs remain unchanged). the number of analog and digital updates is always printed to the terminal when the TF is compiled.
- we will need to construct the following data arrays to programme the hardware:
-- for the viewpoint card each update consists of two 16-bit uints for the timestamp and four 16-bit uints for data. If the timeframe specifies N digital updates we will hence need an array of 6N 16-bit uints. This array is called DIOSamples in the code. Each of the four 16-bit uints for data specifies the state of one bank of the output, four of those giving a total of 64 channels. We currently only use bank A (for actual digital devices) and B (for the DDS). The timestamp calculation is a bit difficult to understand, but documented in the code.
-- As mentioned above we don't specify timestamps for the analog devices, as they simply update when triggered by the digital card. Hence for M analog updates (M \leq N) we need an array of 8M 64-bit floats per card (8 channels per card) to store the date. These two arrays are stored as a python list called AOSamples in the code, where AOSamples[0] and AOSamples[1] are the two arrays corresponding to the two cards.


- SOFTWARE - 
- The timeframe is basically a tab-separated text file, each line corresponding to one command, and the different columns having different purpose depending on the type of command specified. Internally, this timeframe is stored as a pygtk ListStore (http://www.pygtk.org/docs/pygtk/class-gtkliststore.html), but this ListStore can be treated as a simple 2D array for our purposes. (That it's a liststore is only important for displaying the timeframe on the UI).
- we traverse this timeframe twice row-by-row, first to find all variable definitions, and a second time to generate the actual commands for the hardware (this allows us to have a variable definition further down in the TF than it is used).
- we have the following relevant functions in the timeframe compilations:
-- getRowType: determines the type of a timeframe row (i.e. variable definition, analog device, digital device etc) based on a number of heuristics.
-- __evaluateCell__: this takes a text string (taken from one entry in the timeframe (row+column, i.e. one field in the UI) and tries to determine the numerical value of this text, using all currently defined timeframe variables. To do so it basically tries to use the python function 'eval' on that text, passing self._vars (a dictionary containing the TF variables) as an argument. see http://docs.python.org/2/tutorial/datastructures.html#dictionaries for what dictionaries are.
-- parseVariables: this finds all variable definitions and stores them in a dictionary called 'unparsed'. It then tries to evaluate all entries in 'unparsed', adding them to self._vars if succesfull, and keeping them in unparsed only if unsuccesfull. here succesfull means that they evaluate to a number in __evaluateCell__. It keeps doing this for any remaining entries until all entries are parsed (or we hit a recursion wall, due to i.e. a circular variable definition).
-- compileTimeframe: this is the only function called from outside the class, and the only one you should care about. This turns a timeframe into hardware commands. details here:

so here's the big one. 
- in the first stage we don't directly compile to the final arrays. Instead we save all commands in two dictionaries 'analogCommands' and 'digitalCommands'. In these dictionaries we always use the timestamp as key. the value for each key is an array of devices for which we change state. In the case of analog devices each array entry is in turn a tuple of (boardNumber, channelNumber, value), in case of the viewpoint card each entry is a tuple of (bank, bitmask, value) where value can be 0 or 1 and bitmask identifies the channel. 
- after calling parseVariables and setting up necessary local variables we again traverse the timeframe row-by-row. We first evaluate the timestamp for the current row. If that works out we determine the row type, and check which device we want to talk to. If that's an analog device we check whether we're setting a value or ramping. If we're not ramping we simply add a trigger for the digital board if necessary, and add an entry for the analog board with the current value.
if we're ramping (rampType in settings['rampFunctions']) we evaluate the ramptime, and calculate samples, timsteps and values. for each of these we add triggers and the analog command, just as in 'step'.
For digital ramps (which clearly cannot be ramped) we simply add the necessary command.
For DDS ramps we have to calculate the command sequency to programme the DDS. that's a bit complicated to go into details here, we can discuss that later.
Finally we have to go through the dictionaries assembled above and turn those into entries for the hardware arrays. That's actually fairly straightforward. The analog samples are trivial, the only thing we have to worry about is addressing the right entry of the array. The digital one is slightly more involved, both because we need to do the timestamp calculation, and because we need some bit-wise operations to efficiently set all the channels. 
and that's it. we now have to arrays which we can directly pass to the hardware in a form the hw drivers understand. 
